<?php

namespace Tests\Feature;

use App\Models\Quotation;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class UserTest extends TestCase
{
    use RefreshDatabase;
    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        //Create a fresh migration, a quotation and a user before each test
        $this->artisan('migrate:fresh');

        User::factory()->create();
        Quotation::factory()->create();
    }

    public function test_index_users()
    {
        //Create 3 new users
        $user = User::factory(3)->create();

        //Create a get request to the index function
        $response = $this->get('/api/users');

        //Check if the created user is displayed, check if the correct amount of users is displayed and assert there are no errors
        $response
            ->assertJsonCount(4)
            ->assertStatus(200);
    }

    public function test_show_user()
    {
        //Create a new quotation
        $user = User::factory()->create();

        //Create a get request to the show function with the newly created users id
        $response = $this->get('/api/users/' . $user->id);

        //Check if the attributes of the created user are displayed and assert there are no errors
        $response->assertSee($user->first_name)
            ->assertSee($user->id)
            ->assertJsonCount(1)
            ->assertStatus(200);
    }

    public function test_make_user()
    {
        //Create a new user
        $response = $this->post('/api/users/', [
            'first_name' => 'Jane',
            'last_name' => 'Doe',
            'city' => 'Den Haag',
            'country' => 'Nederland',
            'street' => 'Plein',
            'postal_code' => '1289AA',
            'house_number' => 33,
            'email' => 'example@janedoe.com',
            'password' => 'password', // password
        ]);

        //Check if the quotation was made with the correct attributes
        $response->assertSee('Jane')
            ->assertSee('example@janedoe.com')
            ->assertStatus(201);
    }

    public function test_update_user()
    {
        //Create a new quotation
        $user= User::factory()->create();

        //Try to change the customers first name to 'John'
        $response = $this->putJson('api/users/' . $user->id, [
            'customer_first_name' => 'Jane'
        ]);

        //Check if the first name was changed to 'Jane'
        $response->assertSee('Jane')
            ->assertStatus(200);
    }

    public function test_delete_user ()
    {
        //Create a new quotation
        $user = User::factory()->create();

        //Attempt to delete the user and check for errors
        $this->delete('/api/users/' . $user->id)
            ->assertStatus(200);

        //Check if the user can still be displayed
        $response = $this->get('/api/users/' . $user->id);
        $response->assertStatus(404);
    }

    public static function tearDownAfterClass(): void
    {
//        parent::tearDownAfterClass();
//        Artisan::call('migrate:fresh');
        parent::tearDownAfterClass();

    }

}
